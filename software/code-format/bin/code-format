#!/usr/bin/env ruby

require 'pathname'
require 'json'
require 'open3'

# ==============================================================================
#                       Stuff that should be in a library
# ==============================================================================

class Object
  # From: https://github.com/rails/rails/blob/d026af43c35c25814b4d16511f1b8fc6d70a4569/activesupport/lib/active_support/core_ext/object/blank.rb#L18-L20
  def blank?
    respond_to?(:empty?) ? !!empty? : !self
  end
end

# ==============================================================================
#                                  THE PROGRAM
# ==============================================================================

#
# From https://docs.zed.dev/configuration/configuring-zed#formatter:
# "The buffer's text will be passed to the program on stdin, and the formatted output should be written to stdout."
#

# ------------------------------------------------------------------------------
STDERR.puts "==> Parsing the command line arguments ..."
# ------------------------------------------------------------------------------

params = ARGV  # for Zed this should contain only one file path (i.e, `{buffer_path}`)

if params.length == 0
  STDERR.puts "ERROR: This program doesn't work unless you specify a file path parameter!"
  exit 1
end

# In future we might have other things in the params, but for now we only care
# about file paths
for path in params do
  unless Pathname(path).absolute?
    STDERR.puts "ERROR: Parameter '#{path}' is not an absolute file path!"
    exit 1
  end

  unless File.file?(path)
    STDERR.puts "ERROR: Parameter '#{path}' is not a file!"
    exit 1
  end
end

# In future we might actually support multiple files, (and in that case we
# shouldn't read from stdin or write to stdout, and instead read files' contents
# from disk and write back to them,) but for now we don't
if params.length > 1
  STDERR.puts "ERROR: This program doesn't support multiple files!"
  exit 1
end

# In future we shouldn't assume a single file path
path = params[0]
STDERR.puts "Path: '#{path}'"

# ------------------------------------------------------------------------------
STDERR.puts "==> Reading the standard input ..."
# ------------------------------------------------------------------------------

# `STDIN.read` blocks until EOF, so we need to check if there's anything to read
# to not get stuck
text = STDIN.read if IO.select([STDIN], [], [], 0)

# In future we might read files' contents from disk, and write back to them
if text.blank?
  STDERR.puts "ERROR: This program doesn't work unless you pass text to it on stdin!"
  exit 1
end

STDERR.puts "OK"

# ------------------------------------------------------------------------------
STDERR.puts "==> Detecting the language ..."
# ------------------------------------------------------------------------------

def get_language(path, text)
  def get_mime_type(path)
    output, _, _ = Open3.capture3("file", "--brief", "--mime", path)
    mime_type = output.split(';').first.strip
    mime_type
  end

  def get_shebang(text)
    lines = text.split("\n")
    return nil if lines.empty?

    first_line = lines[0]
    if first_line.start_with?("#!")
      first_line
    else
      nil
    end
  end

  def get_language_for_shebang(shebang)
    return nil unless shebang

    if shebang.match?(/\bruby\b/)
      "ruby"
    end

    if shebang.match?(/\bnode\b/)
      "javascript"
    end

    if shebang.match?(/\b(ts-node|deno)\b/)
      "typescript"
    end

    if shebang.match?(/\bbash\b/)
      "shell"
    end
  end

  shebang = get_shebang(text)
  mime_type = get_mime_type(path)
  extension = File.extname(path)

  language_for_shebang = get_language_for_shebang(shebang)
  STDERR.puts "Language detected from shebang ('#{shebang}'): '#{language_for_shebang}'"

  language_for_mime_type = {
    "application/json" => "json",
    "text/html" => "html",
    "text/x-ruby" => "ruby",
    "text/x-script.python" => "python",
    "text/x-shellscript" => "shell",
  }[mime_type]
  STDERR.puts "Language detected from MIME type ('#{mime_type}'): '#{language_for_mime_type}'"

  language_for_extension = {
    #
    # json:
    #
    ".json" => "json",
    #
    # javascript:
    #
    ".js" => "javascript",
    ".mjs" => "javascript",
    #
    # typescript:
    #
    ".ts" => "typescript",
    #
    # html:
    #
    ".html" => "html",
    #
    # css:
    #
    ".css" => "css",
    #
    # markdown:
    #
    ".md" => "markdown",
    #
    # rust:
    #
    ".rs" => "rust",
    #
    # shell:
    #
    ".sh" => "shell",
    ".bashrc" => "shell",
  }[extension]
  STDERR.puts "Language detected from file name extension ('#{extension}'): '#{language_for_extension}'"

  language = nil
  if language_for_shebang
    language = language_for_shebang
    STDERR.puts "Language picked: '#{language}' (shebang)"
  elsif language_for_mime_type
    language = language_for_mime_type
    STDERR.puts "Language picked : '#{language}' (mime type)"
  elsif language_for_extension
    language = language_for_extension
    STDERR.puts "Language picked: '#{language}' (file name extension)"
  end

  language
end

language = get_language(path, text)

unless language
  STDERR.puts "ERROR: Could not determine the language!"
  exit 1
end

# ------------------------------------------------------------------------------
STDERR.puts "==> Selecting a formatter ..."
# ------------------------------------------------------------------------------

formatter = {
  #
  # prettier:
  #
  "json" => "prettier",
  "javascript" => "prettier",
  "typescript" => "prettier",
  "html" => "prettier",
  "css" => "prettier",
  "markdown" => "prettier",
  #
  # rustfmt:
  #
  "rust" => "rustfmt",
  #
  # shfmt:
  #
  "shell" => "shfmt",
}[language]

unless formatter
  STDERR.puts "ERROR: Could not determine a formatter!"
  exit 1
end

STDERR.puts "Formatter: #{formatter}"

# ------------------------------------------------------------------------------
STDERR.puts "==> Looking for the project directory ..."
# ------------------------------------------------------------------------------

projectdir = nil
currentdir = File.dirname(path)

loop do
  STDERR.puts "Looking in #{currentdir} ..."

  if File.directory?(File.join(currentdir, ".git"))
    projectdir = currentdir
    break
  end

  if currentdir == Dir.home
    STDERR.puts "ERROR: Couldn't find the project directory: Reached user's home ('#{Dir.home}') starting from '#{File.dirname(path)}'!"
    exit 1
  end

  if currentdir == '/'
    STDERR.puts "ERROR: Couldn't find the project directory: Reached the root ('/') starting from '#{File.dirname(path)}'!"
    exit 1
  end

  currentdir = File.dirname(currentdir)
end

STDERR.puts "Found '#{projectdir}'"

# ------------------------------------------------------------------------------
#                                  prettier
# ------------------------------------------------------------------------------
if formatter == 'prettier'
  CONFIG_FILES_TO_CHECK = [
    ".prettierrc",
    ".prettierrc.json",
    ".prettierrc.js",
    "prettier.config.js",
  ]
  # TODO: Check ".prettierrc" contains `"requirePragma": true,`, because if it does, than we should consider "fail" this command, else user won't see any error and the "formatting" will seem as if it was successful.

  STDERR.puts "==> Looking for prettier (configuration) ..."

  currentdir = File.dirname(path)

  loop do
    STDERR.puts "Looking in #{currentdir} ..."

    config_found = false

    for config_file in CONFIG_FILES_TO_CHECK do
      config_file = File.join(currentdir, config_file)
      if File.file?(config_file)
        STDERR.puts "Found #{config_file}"
        config_found = true
        break
      end
    end

    break if config_found

    packagejson = File.join(currentdir, 'package.json')
    if File.file?(packagejson)
      if JSON.parse(File.read(packagejson)).key?('prettier')
        STDERR.puts "Found 'prettier' configuration in #{packagejson}"
        break
      end
    end

    if currentdir == projectdir
      STDERR.puts "ERROR: Couldn't find prettier configuration: Reached the root of the project ('#{projectdir}')!"
      exit 1
    end

    currentdir = File.dirname(currentdir)
  end

  STDERR.puts "==> Looking for prettier (binary) ..."

  prettier = nil
  currentdir = File.dirname(path)

  loop do
    STDERR.puts "Looking in #{currentdir} ..."

    prettier_candidate = File.join(currentdir, 'node_modules', '.bin', 'prettier')
    if File.file?(prettier_candidate)
      STDERR.puts "Found #{prettier_candidate}"
      prettier = prettier_candidate
      break
    end

    if currentdir == projectdir
      # In future we might consider checking for globally installed prettier (e.g., via Homebrew)
      # or even running `npx prettier`.
      STDERR.puts "ERROR: Couldn't find prettier: Reached the root of the project ('#{projectdir}')!"
      exit 1
    end

    currentdir = File.dirname(currentdir)
  end

  # The reason why we're passing both `--log-level` and `--loglevel` is that
  # at some point prettier added a hyphen to the name of the option, so if we
  # want to support both old and new versions, we can pass both and that seems
  # to make prettier happy:
  command = "#{prettier} --loglevel error --log-level error --stdin-filepath #{path}"
end

# ------------------------------------------------------------------------------
#                                  rustfmt
# ------------------------------------------------------------------------------
if formatter == 'rustfmt'
  CONFIG_FILES_TO_CHECK = [
    "rustfmt.toml",
    ".rustfmt.toml",
  ]

  STDERR.puts "==> Looking for rustfmt (configuration) ..."

  currentdir = File.dirname(path)

  loop do
    STDERR.puts "Looking in #{currentdir} ..."

    config_found = false

    for config_file in CONFIG_FILES_TO_CHECK do
      config_file = File.join(currentdir, config_file)
      if File.file?(config_file)
          STDERR.puts "Found #{config_file}"
        config_found = true
        break
      end
    end

    break if config_found

    if currentdir == projectdir
      STDERR.puts "ERROR: Couldn't find rustfmt configuration: Reached the root of the project ('#{projectdir}')!"
      exit 1
    end

    currentdir = File.dirname(currentdir)
  end

  # Although `rustfmt --help` doesn't mention this, rustfmt will read from the
  # stdin with no file was given and that's what we're relying on here.
  command = "rustfmt --quiet --emit stdout"
end

# ------------------------------------------------------------------------------
#                                  shfmt
# ------------------------------------------------------------------------------
if formatter == 'shfmt'
  # TODO: Add support for EditorConfig files. (See `man shfmt`.)

  command = "shfmt --simplify --language-dialect bash --indent 4 --binary-next-line --case-indent"
end

# ==============================================================================
#                               FORMAT THE CODE
# ==============================================================================

STDERR.puts "==> Formatting '#{path} (#{formatter}) ..."
STDERR.puts "Running `#{command}`"

output = nil
error = nil
status = nil

begin
  output, error, status = Open3.capture3(command, stdin_data: text)
rescue e
  STDERR.puts "ERROR: #{e.message}!"
  exit 1
end

# prettier will quit with exit code 0 even if there are errors
unless error.blank?
  STDERR.puts "ERROR: Command failed (#{status})!"
  STDERR.puts "#{error}"
  exit 1
end

# ==============================================================================
#                            FORMATTED OUTPUT
# ==============================================================================

# sometimes things don't go as expected, so let's not "risk" to "empty" a file's
# contents:
if output.blank?
  STDERR.puts "ERROR: Output was empty!"
  exit 1
end

print output
