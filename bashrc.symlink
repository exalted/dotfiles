# ------------------------------------------------------------------------------
# Homebrew
# ------------------------------------------------------------------------------
homebrew=/usr/local/bin:/usr/local/sbin
export PATH=$homebrew:$PATH
unset homebrew

# ------------------------------------------------------------------------------
# Executable python scripts will be put in:
#   /usr/local/share/python
# so you may want to put "/usr/local/share/python" in your PATH, too.
# ------------------------------------------------------------------------------
export PATH=/usr/local/share/python:$PATH

# ------------------------------------------------------------------------------
# Homebrew recommends prepending the following path to your PATH environment
# variable to have npm-installed binaries picked up:
#   /usr/local/share/npm/bin
# ------------------------------------------------------------------------------
export PATH=/usr/local/share/npm/bin:$PATH

# ------------------------------------------------------------------------------
# Better Bash
# ------------------------------------------------------------------------------
export HISTSIZE=100000
# (Ref.: http://askubuntu.com/a/15929)
export HISTCONTROL=ignoreboth:erasedups
# # (Ref.: http://www.talug.org/events/20030709/cmdline_history.html)
# export HISTIGNORE="&:ls:[bf]g:exit"

# Don't tab-complete if prompt is empty
shopt -s no_empty_cmd_completion

# History completion to what's already on the line
# (Ref.: http://stackoverflow.com/a/1030206/11895)
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# ------------------------------------------------------------------------------
# See "brew info bash-completion"
# ------------------------------------------------------------------------------
if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
fi

# ------------------------------------------------------------------------------
# Add the /bin directory that ships with Postgres.app
# (Ref.: http://postgresapp.com/documentation)
# ------------------------------------------------------------------------------
export PATH=/Applications/Postgres.app/Contents/MacOS/bin:$PATH

# ------------------------------------------------------------------------------
# Heroku
# ------------------------------------------------------------------------------
### Added by the Heroku Toolbelt
export PATH=/usr/local/heroku/bin:$PATH

# ------------------------------------------------------------------------------
# Pimp my prompt
# ------------------------------------------------------------------------------
function __ps1_newline_login {
    if [[ -n "${PS1_NEWLINE_LOGIN:-}" ]]; then
        echo
    else
        PS1_NEWLINE_LOGIN=true
    fi
}

PROMPT_COMMAND="${PROMPT_COMMAND}__ps1_newline_login;"

export GIT_PS1_SHOWDIRTYSTATE=true `# show unstaged (*) and staged (+) changes`

# export PS1="\h:\W \u\$ "
export PS1="\[\e[32m\]➜  \[\e[34m\]\W:\[\e[31m\]\$(__git_ps1 \" (%s)\")\[\e[0m\]  "

# ------------------------------------------------------------------------------
# Terminal colors
# (Ref.: http://noiseandheat.com/blog/2011/12/os-x-lion-terminal-colours/)
# ------------------------------------------------------------------------------
#
# Tell ls to be colourful
export CLICOLOR=1
#
# Tell grep to highlight matches
export GREP_OPTIONS='--color=auto'
#
source "`brew --prefix`/etc/grc.bashrc"

# ------------------------------------------------------------------------------
# More less ;-)
# ------------------------------------------------------------------------------

alias less='less --RAW-CONTROL-CHARS --IGNORE-CASE'

# ------------------------------------------------------------------------------
# virtualenv
# ------------------------------------------------------------------------------
# startup virtualenv-burrito
if [ -f $HOME/.venvburrito/startup.sh ]; then
    . $HOME/.venvburrito/startup.sh
fi

# ------------------------------------------------------------------------------
# rbenv
# ------------------------------------------------------------------------------
if which rbenv > /dev/null; then
    # Enable shims and autocompletion
    eval "$(rbenv init -)";

    # Adding project-specific binstubs to PATH
    # (Ref.: https://github.com/sstephenson/rbenv/wiki/Understanding-binstubs)
    export PATH=./bin:$PATH
fi

# Workaround: revert side effect of adding './bin' to your PATH above using
# rbenv's "ri" instead of Bundler binstub's
function ri {
    eval "$(rbenv which ri) $@"
}

# Workaround: apparently "gem rdoc --all" can't generate documentation for
# pseudo gems like bigdecimal, io-console, psych and the others that are bundled
# with Ruby that are not placed in the directories RubyGems is expecting but
# instead they are in stdlib path.
# (Ref.: https://github.com/rubygems/rubygems/issues/79)
function gem-gendocs {
    if [[ "$@" == *--all* ]]; then
        echo 'Watch out! I accept same options as "gem rdoc" except "--all.' >&2
        return 1
    fi
    local env_version="$(rbenv version | cut -d" " -f1)"
    # just in case you have write permissions to system path (which usually you
    # don't and that's okay):
    if [[ "$env_version" == 'system' ]]; then
        echo "Trying to generate documentation for system, \
switch to an environment instead?" >&2
        return 1
    fi
    echo "Generating documentation for $env_version..."
    for gemname in $(gem list | cut -d' ' -f1); do
        gem rdoc "$@ $gemname" 2> /dev/null
    done
    echo 'Done.'
}

# ------------------------------------------------------------------------------
# EDITOR
# ------------------------------------------------------------------------------
export EDITOR='subl'

# ------------------------------------------------------------------------------
# Default Development Directory
# ------------------------------------------------------------------------------
export DEVELOPMENT_DIR=$HOME/Development

# ------------------------------------------------------------------------------
# Disabling tilde expansion
# (Ref.: http://superuser.com/a/95655/45837)
# ------------------------------------------------------------------------------
__expand_tilde_by_ref(){ true; }
_expand(){ true; }

# ------------------------------------------------------------------------------
# Common typos
# ------------------------------------------------------------------------------
alias cd..='cd ..'

# ------------------------------------------------------------------------------
# Alias hub to git
# (Ref.: https://github.com/defunkt/hub#aliasing)
# ------------------------------------------------------------------------------
eval "$(hub alias -s)"

# ------------------------------------------------------------------------------
# Better Git
# ------------------------------------------------------------------------------

function __git_stash_wrap {
    SHA=$(git rev-list --max-count=1 HEAD) &&
    touch $SHA &&
    git stash --keep-index --include-untracked &> /dev/null &&
    eval '$@' &&
    git stash pop --index &> /dev/null &&
    rm -f $SHA
}

# ------------------------------------------------------------------------------
# HTTPie with colorized and paged output
# (Ref.: https://github.com/jkbr/httpie#redirected-output)
# ------------------------------------------------------------------------------
function httpless {
    http --pretty=all "$@" | less --RAW-CONTROL-CHARS --IGNORE-CASE;
}

# ------------------------------------------------------------------------------
# Generate random passwords as by KION SpA specs
# ------------------------------------------------------------------------------
alias kionpw='pwgen -cnyB 10 1'

# ------------------------------------------------------------------------------
# Fake commands
# ------------------------------------------------------------------------------
alias spider='wget --force-directories --recursive --no-parent --no-clobber --convert-links --adjust-extension'

alias diskusage='du -sh'

function google {
    local search=""
    for term in "$@"; do
        if [[ -z "${search:-}" ]]; then
            search="$term"
        else
            search="$search%20$term"
        fi
    done
    if [[ -z "${search:-}" ]]; then
        echo 'Usage: google something' >&2
        return 1
    else
        open "http://www.google.com/?q=$search";
    fi
}

function serve {
    python -m SimpleHTTPServer "${1:-8080}"
}
